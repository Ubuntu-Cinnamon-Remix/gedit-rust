// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::App;
use crate::MenuExtension;
use glib::object::IsA;
use glib::translate::*;
use glib::StaticType;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GeditAppActivatable")]
    pub struct AppActivatable(Interface<ffi::GeditAppActivatable, ffi::GeditAppActivatableInterface>);

    match fn {
        type_ => || ffi::gedit_app_activatable_get_type(),
    }
}

impl AppActivatable {
        pub const NONE: Option<&'static AppActivatable> = None;
    
}

pub trait AppActivatableExt: 'static {
    #[doc(alias = "gedit_app_activatable_activate")]
    fn activate(&self);

    #[doc(alias = "gedit_app_activatable_deactivate")]
    fn deactivate(&self);

    #[doc(alias = "gedit_app_activatable_extend_menu")]
    fn extend_menu(&self, extension_point: &str) -> Option<MenuExtension>;

    fn app(&self) -> Option<App>;
}

impl<O: IsA<AppActivatable>> AppActivatableExt for O {
    fn activate(&self) {
        unsafe {
            ffi::gedit_app_activatable_activate(self.as_ref().to_glib_none().0);
        }
    }

    fn deactivate(&self) {
        unsafe {
            ffi::gedit_app_activatable_deactivate(self.as_ref().to_glib_none().0);
        }
    }

    fn extend_menu(&self, extension_point: &str) -> Option<MenuExtension> {
        unsafe {
            from_glib_full(ffi::gedit_app_activatable_extend_menu(self.as_ref().to_glib_none().0, extension_point.to_glib_none().0))
        }
    }

    fn app(&self) -> Option<App> {
        glib::ObjectExt::property(self.as_ref(), "app")
    }
}

impl fmt::Display for AppActivatable {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("AppActivatable")
    }
}
