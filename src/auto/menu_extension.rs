// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use glib::object::Cast;
use glib::object::ObjectType as ObjectType_;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GeditMenuExtension")]
    pub struct MenuExtension(Object<ffi::GeditMenuExtension, ffi::GeditMenuExtensionClass>);

    match fn {
        type_ => || ffi::gedit_menu_extension_get_type(),
    }
}

impl MenuExtension {
    #[doc(alias = "gedit_menu_extension_new")]
    pub fn new(menu: &gio::Menu) -> MenuExtension {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gedit_menu_extension_new(menu.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`MenuExtension`] objects.
            ///
            /// This method returns an instance of [`MenuExtensionBuilder`](crate::builders::MenuExtensionBuilder) which can be used to create [`MenuExtension`] objects.
            pub fn builder() -> MenuExtensionBuilder {
                MenuExtensionBuilder::default()
            }
        

    #[doc(alias = "gedit_menu_extension_append_menu_item")]
    pub fn append_menu_item(&self, item: &gio::MenuItem) {
        unsafe {
            ffi::gedit_menu_extension_append_menu_item(self.to_glib_none().0, item.to_glib_none().0);
        }
    }

    #[doc(alias = "gedit_menu_extension_prepend_menu_item")]
    pub fn prepend_menu_item(&self, item: &gio::MenuItem) {
        unsafe {
            ffi::gedit_menu_extension_prepend_menu_item(self.to_glib_none().0, item.to_glib_none().0);
        }
    }

    #[doc(alias = "gedit_menu_extension_remove_items")]
    pub fn remove_items(&self) {
        unsafe {
            ffi::gedit_menu_extension_remove_items(self.to_glib_none().0);
        }
    }

    pub fn menu(&self) -> Option<gio::Menu> {
        glib::ObjectExt::property(self, "menu")
    }
}

impl Default for MenuExtension {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>(&[])
                     }
                 }

#[derive(Clone, Default)]
// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`MenuExtension`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct MenuExtensionBuilder {
    menu: Option<gio::Menu>,
}

impl MenuExtensionBuilder {
    // rustdoc-stripper-ignore-next
    /// Create a new [`MenuExtensionBuilder`].
    pub fn new() -> Self {
        Self::default()
    }


    // rustdoc-stripper-ignore-next
    /// Build the [`MenuExtension`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> MenuExtension {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
if let Some(ref menu) = self.menu {
                properties.push(("menu", menu));
            }
        glib::Object::new::<MenuExtension>(&properties)

    }

    pub fn menu(mut self, menu: &gio::Menu) -> Self {
        self.menu = Some(menu.clone());
        self
    }
}

impl fmt::Display for MenuExtension {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("MenuExtension")
    }
}
