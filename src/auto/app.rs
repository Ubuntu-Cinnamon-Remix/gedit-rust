// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::Document;
use crate::View;
use crate::Window;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GeditApp")]
    pub struct App(Object<ffi::GeditApp, ffi::GeditAppClass>) @extends gtk::Application;

    match fn {
        type_ => || ffi::gedit_app_get_type(),
    }
}

impl App {
        pub const NONE: Option<&'static App> = None;
    

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`App`] objects.
            ///
            /// This method returns an instance of [`AppBuilder`](crate::builders::AppBuilder) which can be used to create [`App`] objects.
            pub fn builder() -> AppBuilder {
                AppBuilder::default()
            }
        
}

#[derive(Clone, Default)]
// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`App`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct AppBuilder {
    //app-menu: /*Unknown type*/,
    //menubar: /*Unknown type*/,
    #[cfg(any(feature = "gtk_v3_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3_4")))]
    register_session: Option<bool>,
}

impl AppBuilder {
    // rustdoc-stripper-ignore-next
    /// Create a new [`AppBuilder`].
    pub fn new() -> Self {
        Self::default()
    }


    // rustdoc-stripper-ignore-next
    /// Build the [`App`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> App {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        #[cfg(any(feature = "gtk_v3_4", feature = "dox"))]
if let Some(ref register_session) = self.register_session {
                properties.push(("register-session", register_session));
            }
        glib::Object::new::<App>(&properties)

    }

    #[cfg(any(feature = "gtk_v3_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v3_4")))]
    pub fn register_session(mut self, register_session: bool) -> Self {
        self.register_session = Some(register_session);
        self
    }
}

pub trait AppExt: 'static {
    #[doc(alias = "gedit_app_create_window")]
    fn create_window(&self, screen: Option<&gdk::Screen>) -> Option<Window>;

    #[doc(alias = "gedit_app_get_documents")]
    #[doc(alias = "get_documents")]
    fn documents(&self) -> Vec<Document>;

    #[doc(alias = "gedit_app_get_main_windows")]
    #[doc(alias = "get_main_windows")]
    fn main_windows(&self) -> Vec<Window>;

    #[doc(alias = "gedit_app_get_views")]
    #[doc(alias = "get_views")]
    fn views(&self) -> Vec<View>;

    //#[doc(alias = "gedit_app_process_window_event")]
    //fn process_window_event(&self, window: &impl IsA<Window>, event: /*Ignored*/&mut gdk::Event) -> bool;

    #[doc(alias = "gedit_app_set_window_title")]
    fn set_window_title(&self, window: &impl IsA<Window>, title: &str);

    #[doc(alias = "gedit_app_show_help")]
    fn show_help(&self, parent: &impl IsA<gtk::Window>, name: &str, link_id: &str) -> bool;
}

impl<O: IsA<App>> AppExt for O {
    fn create_window(&self, screen: Option<&gdk::Screen>) -> Option<Window> {
        unsafe {
            from_glib_none(ffi::gedit_app_create_window(self.as_ref().to_glib_none().0, screen.to_glib_none().0))
        }
    }

    fn documents(&self) -> Vec<Document> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::gedit_app_get_documents(self.as_ref().to_glib_none().0))
        }
    }

    fn main_windows(&self) -> Vec<Window> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::gedit_app_get_main_windows(self.as_ref().to_glib_none().0))
        }
    }

    fn views(&self) -> Vec<View> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::gedit_app_get_views(self.as_ref().to_glib_none().0))
        }
    }

    //fn process_window_event(&self, window: &impl IsA<Window>, event: /*Ignored*/&mut gdk::Event) -> bool {
    //    unsafe { TODO: call ffi:gedit_app_process_window_event() }
    //}

    fn set_window_title(&self, window: &impl IsA<Window>, title: &str) {
        unsafe {
            ffi::gedit_app_set_window_title(self.as_ref().to_glib_none().0, window.as_ref().to_glib_none().0, title.to_glib_none().0);
        }
    }

    fn show_help(&self, parent: &impl IsA<gtk::Window>, name: &str, link_id: &str) -> bool {
        unsafe {
            from_glib(ffi::gedit_app_show_help(self.as_ref().to_glib_none().0, parent.as_ref().to_glib_none().0, name.to_glib_none().0, link_id.to_glib_none().0))
        }
    }
}

impl fmt::Display for App {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("App")
    }
}
