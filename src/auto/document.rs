// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "GeditDocument")]
    pub struct Document(Object<ffi::GeditDocument, ffi::GeditDocumentClass>) @extends gtk::TextBuffer;

    match fn {
        type_ => || ffi::gedit_document_get_type(),
    }
}

impl Document {
        pub const NONE: Option<&'static Document> = None;
    

    #[doc(alias = "gedit_document_new")]
    pub fn new() -> Document {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gedit_document_new())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Document`] objects.
            ///
            /// This method returns an instance of [`DocumentBuilder`](crate::builders::DocumentBuilder) which can be used to create [`Document`] objects.
            pub fn builder() -> DocumentBuilder {
                DocumentBuilder::default()
            }
        
}

impl Default for Document {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

#[derive(Clone, Default)]
// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Document`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct DocumentBuilder {
    content_type: Option<String>,
    use_gvfs_metadata: Option<bool>,
    //tag-table: /*Unknown type*/,
    #[cfg(any(feature = "gtk_v2_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v2_8")))]
    text: Option<String>,
}

impl DocumentBuilder {
    // rustdoc-stripper-ignore-next
    /// Create a new [`DocumentBuilder`].
    pub fn new() -> Self {
        Self::default()
    }


    // rustdoc-stripper-ignore-next
    /// Build the [`Document`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Document {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
if let Some(ref content_type) = self.content_type {
                properties.push(("content-type", content_type));
            }
if let Some(ref use_gvfs_metadata) = self.use_gvfs_metadata {
                properties.push(("use-gvfs-metadata", use_gvfs_metadata));
            }
        #[cfg(any(feature = "gtk_v2_8", feature = "dox"))]
if let Some(ref text) = self.text {
                properties.push(("text", text));
            }
        glib::Object::new::<Document>(&properties)

    }

    pub fn content_type(mut self, content_type: &str) -> Self {
        self.content_type = Some(content_type.to_string());
        self
    }

    pub fn use_gvfs_metadata(mut self, use_gvfs_metadata: bool) -> Self {
        self.use_gvfs_metadata = Some(use_gvfs_metadata);
        self
    }

    #[cfg(any(feature = "gtk_v2_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v2_8")))]
    pub fn text(mut self, text: &str) -> Self {
        self.text = Some(text.to_string());
        self
    }
}

pub trait DocumentExt: 'static {
    #[doc(alias = "gedit_document_get_content_type")]
    #[doc(alias = "get_content_type")]
    fn content_type(&self) -> Option<glib::GString>;

    //#[doc(alias = "gedit_document_get_file")]
    //#[doc(alias = "get_file")]
    //fn file(&self) -> /*Ignored*/Option<gtk_source::File>;

    //#[doc(alias = "gedit_document_get_language")]
    //#[doc(alias = "get_language")]
    //fn language(&self) -> /*Ignored*/Option<gtk_source::Language>;

    #[doc(alias = "gedit_document_get_metadata")]
    #[doc(alias = "get_metadata")]
    fn metadata(&self, key: &str) -> Option<glib::GString>;

    #[doc(alias = "gedit_document_get_mime_type")]
    #[doc(alias = "get_mime_type")]
    fn mime_type(&self) -> Option<glib::GString>;

    //#[doc(alias = "gedit_document_get_search_context")]
    //#[doc(alias = "get_search_context")]
    //fn search_context(&self) -> /*Ignored*/Option<gtk_source::SearchContext>;

    #[doc(alias = "gedit_document_get_short_name_for_display")]
    #[doc(alias = "get_short_name_for_display")]
    fn short_name_for_display(&self) -> Option<glib::GString>;

    #[doc(alias = "gedit_document_goto_line")]
    fn goto_line(&self, line: i32) -> bool;

    #[doc(alias = "gedit_document_goto_line_offset")]
    fn goto_line_offset(&self, line: i32, line_offset: i32) -> bool;

    #[doc(alias = "gedit_document_is_untitled")]
    fn is_untitled(&self) -> bool;

    #[doc(alias = "gedit_document_is_untouched")]
    fn is_untouched(&self) -> bool;

    //#[doc(alias = "gedit_document_set_language")]
    //fn set_language(&self, lang: /*Ignored*/Option<&gtk_source::Language>);

    //#[doc(alias = "gedit_document_set_metadata")]
    //fn set_metadata(&self, first_key: &str, : /*Unknown conversion*//*Unimplemented*/Basic: VarArgs);

    //#[doc(alias = "gedit_document_set_search_context")]
    //fn set_search_context(&self, search_context: /*Ignored*/Option<&gtk_source::SearchContext>);

    #[doc(alias = "content-type")]
    fn set_content_type(&self, content_type: Option<&str>);

    #[doc(alias = "empty-search")]
    fn is_empty_search(&self) -> bool;

    fn shortname(&self) -> Option<glib::GString>;

    #[doc(alias = "use-gvfs-metadata")]
    fn uses_gvfs_metadata(&self) -> bool;

    #[doc(alias = "cursor-moved")]
    fn connect_cursor_moved<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "load")]
    fn connect_load<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "loaded")]
    fn connect_loaded<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "save")]
    fn connect_save<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "saved")]
    fn connect_saved<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "content-type")]
    fn connect_content_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "empty-search")]
    fn connect_empty_search_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "mime-type")]
    fn connect_mime_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "shortname")]
    fn connect_shortname_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Document>> DocumentExt for O {
    fn content_type(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gedit_document_get_content_type(self.as_ref().to_glib_none().0))
        }
    }

    //fn file(&self) -> /*Ignored*/Option<gtk_source::File> {
    //    unsafe { TODO: call ffi:gedit_document_get_file() }
    //}

    //fn language(&self) -> /*Ignored*/Option<gtk_source::Language> {
    //    unsafe { TODO: call ffi:gedit_document_get_language() }
    //}

    fn metadata(&self, key: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gedit_document_get_metadata(self.as_ref().to_glib_none().0, key.to_glib_none().0))
        }
    }

    fn mime_type(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gedit_document_get_mime_type(self.as_ref().to_glib_none().0))
        }
    }

    //fn search_context(&self) -> /*Ignored*/Option<gtk_source::SearchContext> {
    //    unsafe { TODO: call ffi:gedit_document_get_search_context() }
    //}

    fn short_name_for_display(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gedit_document_get_short_name_for_display(self.as_ref().to_glib_none().0))
        }
    }

    fn goto_line(&self, line: i32) -> bool {
        unsafe {
            from_glib(ffi::gedit_document_goto_line(self.as_ref().to_glib_none().0, line))
        }
    }

    fn goto_line_offset(&self, line: i32, line_offset: i32) -> bool {
        unsafe {
            from_glib(ffi::gedit_document_goto_line_offset(self.as_ref().to_glib_none().0, line, line_offset))
        }
    }

    fn is_untitled(&self) -> bool {
        unsafe {
            from_glib(ffi::gedit_document_is_untitled(self.as_ref().to_glib_none().0))
        }
    }

    fn is_untouched(&self) -> bool {
        unsafe {
            from_glib(ffi::gedit_document_is_untouched(self.as_ref().to_glib_none().0))
        }
    }

    //fn set_language(&self, lang: /*Ignored*/Option<&gtk_source::Language>) {
    //    unsafe { TODO: call ffi:gedit_document_set_language() }
    //}

    //fn set_metadata(&self, first_key: &str, : /*Unknown conversion*//*Unimplemented*/Basic: VarArgs) {
    //    unsafe { TODO: call ffi:gedit_document_set_metadata() }
    //}

    //fn set_search_context(&self, search_context: /*Ignored*/Option<&gtk_source::SearchContext>) {
    //    unsafe { TODO: call ffi:gedit_document_set_search_context() }
    //}

    fn set_content_type(&self, content_type: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(),"content-type", &content_type)
    }

    fn is_empty_search(&self) -> bool {
        glib::ObjectExt::property(self.as_ref(), "empty-search")
    }

    fn shortname(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "shortname")
    }

    fn uses_gvfs_metadata(&self) -> bool {
        glib::ObjectExt::property(self.as_ref(), "use-gvfs-metadata")
    }

    fn connect_cursor_moved<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn cursor_moved_trampoline<P: IsA<Document>, F: Fn(&P) + 'static>(this: *mut ffi::GeditDocument, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Document::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"cursor-moved\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(cursor_moved_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_load<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn load_trampoline<P: IsA<Document>, F: Fn(&P) + 'static>(this: *mut ffi::GeditDocument, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Document::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"load\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(load_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_loaded<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn loaded_trampoline<P: IsA<Document>, F: Fn(&P) + 'static>(this: *mut ffi::GeditDocument, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Document::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"loaded\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(loaded_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_save<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn save_trampoline<P: IsA<Document>, F: Fn(&P) + 'static>(this: *mut ffi::GeditDocument, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Document::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"save\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(save_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_saved<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn saved_trampoline<P: IsA<Document>, F: Fn(&P) + 'static>(this: *mut ffi::GeditDocument, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Document::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"saved\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(saved_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_content_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_content_type_trampoline<P: IsA<Document>, F: Fn(&P) + 'static>(this: *mut ffi::GeditDocument, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Document::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::content-type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_content_type_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_empty_search_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_empty_search_trampoline<P: IsA<Document>, F: Fn(&P) + 'static>(this: *mut ffi::GeditDocument, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Document::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::empty-search\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_empty_search_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_mime_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mime_type_trampoline<P: IsA<Document>, F: Fn(&P) + 'static>(this: *mut ffi::GeditDocument, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Document::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::mime-type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_mime_type_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_shortname_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_shortname_trampoline<P: IsA<Document>, F: Fn(&P) + 'static>(this: *mut ffi::GeditDocument, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Document::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::shortname\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_shortname_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Document {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Document")
    }
}
