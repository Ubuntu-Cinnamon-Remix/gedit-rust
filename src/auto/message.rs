// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "GeditMessage")]
    pub struct Message(Object<ffi::GeditMessage, ffi::GeditMessageClass>);

    match fn {
        type_ => || ffi::gedit_message_get_type(),
    }
}

impl Message {
        pub const NONE: Option<&'static Message> = None;
    

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Message`] objects.
            ///
            /// This method returns an instance of [`MessageBuilder`](crate::builders::MessageBuilder) which can be used to create [`Message`] objects.
            pub fn builder() -> MessageBuilder {
                MessageBuilder::default()
            }
        

    #[doc(alias = "gedit_message_is_valid_object_path")]
    pub fn is_valid_object_path(object_path: Option<&str>) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gedit_message_is_valid_object_path(object_path.to_glib_none().0))
        }
    }

    #[doc(alias = "gedit_message_type_check")]
    pub fn type_check(gtype: glib::types::Type, propname: &str, value_type: glib::types::Type) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gedit_message_type_check(gtype.into_glib(), propname.to_glib_none().0, value_type.into_glib()))
        }
    }

    #[doc(alias = "gedit_message_type_has")]
    pub fn type_has(gtype: glib::types::Type, propname: &str) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gedit_message_type_has(gtype.into_glib(), propname.to_glib_none().0))
        }
    }

    #[doc(alias = "gedit_message_type_identifier")]
    pub fn type_identifier(object_path: Option<&str>, method: Option<&str>) -> Option<glib::GString> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gedit_message_type_identifier(object_path.to_glib_none().0, method.to_glib_none().0))
        }
    }
}

#[derive(Clone, Default)]
// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Message`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct MessageBuilder {
    method: Option<String>,
    object_path: Option<String>,
}

impl MessageBuilder {
    // rustdoc-stripper-ignore-next
    /// Create a new [`MessageBuilder`].
    pub fn new() -> Self {
        Self::default()
    }


    // rustdoc-stripper-ignore-next
    /// Build the [`Message`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Message {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
if let Some(ref method) = self.method {
                properties.push(("method", method));
            }
if let Some(ref object_path) = self.object_path {
                properties.push(("object-path", object_path));
            }
        glib::Object::new::<Message>(&properties)

    }

    pub fn method(mut self, method: &str) -> Self {
        self.method = Some(method.to_string());
        self
    }

    pub fn object_path(mut self, object_path: &str) -> Self {
        self.object_path = Some(object_path.to_string());
        self
    }
}

pub trait MessageExt: 'static {
    #[doc(alias = "gedit_message_get_method")]
    #[doc(alias = "get_method")]
    fn method(&self) -> Option<glib::GString>;

    #[doc(alias = "gedit_message_get_object_path")]
    #[doc(alias = "get_object_path")]
    fn object_path(&self) -> Option<glib::GString>;

    #[doc(alias = "gedit_message_has")]
    fn has(&self, propname: &str) -> bool;

    fn set_method(&self, method: Option<&str>);

    #[doc(alias = "object-path")]
    fn set_object_path(&self, object_path: Option<&str>);

    #[doc(alias = "method")]
    fn connect_method_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "object-path")]
    fn connect_object_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Message>> MessageExt for O {
    fn method(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gedit_message_get_method(self.as_ref().to_glib_none().0))
        }
    }

    fn object_path(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gedit_message_get_object_path(self.as_ref().to_glib_none().0))
        }
    }

    fn has(&self, propname: &str) -> bool {
        unsafe {
            from_glib(ffi::gedit_message_has(self.as_ref().to_glib_none().0, propname.to_glib_none().0))
        }
    }

    fn set_method(&self, method: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(),"method", &method)
    }

    fn set_object_path(&self, object_path: Option<&str>) {
        glib::ObjectExt::set_property(self.as_ref(),"object-path", &object_path)
    }

    fn connect_method_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_method_trampoline<P: IsA<Message>, F: Fn(&P) + 'static>(this: *mut ffi::GeditMessage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Message::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::method\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_method_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_object_path_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_object_path_trampoline<P: IsA<Message>, F: Fn(&P) + 'static>(this: *mut ffi::GeditMessage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Message::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::object-path\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_object_path_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Message {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Message")
    }
}
