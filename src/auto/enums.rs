// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GeditTabState")]
pub enum TabState {
    #[doc(alias = "GEDIT_TAB_STATE_NORMAL")]
    StateNormal,
    #[doc(alias = "GEDIT_TAB_STATE_LOADING")]
    StateLoading,
    #[doc(alias = "GEDIT_TAB_STATE_REVERTING")]
    StateReverting,
    #[doc(alias = "GEDIT_TAB_STATE_SAVING")]
    StateSaving,
    #[doc(alias = "GEDIT_TAB_STATE_PRINTING")]
    StatePrinting,
    #[doc(alias = "GEDIT_TAB_STATE_SHOWING_PRINT_PREVIEW")]
    StateShowingPrintPreview,
    #[doc(alias = "GEDIT_TAB_STATE_LOADING_ERROR")]
    StateLoadingError,
    #[doc(alias = "GEDIT_TAB_STATE_REVERTING_ERROR")]
    StateRevertingError,
    #[doc(alias = "GEDIT_TAB_STATE_SAVING_ERROR")]
    StateSavingError,
    #[doc(alias = "GEDIT_TAB_STATE_GENERIC_ERROR")]
    StateGenericError,
    #[doc(alias = "GEDIT_TAB_STATE_CLOSING")]
    StateClosing,
    #[doc(alias = "GEDIT_TAB_STATE_EXTERNALLY_MODIFIED_NOTIFICATION")]
    StateExternallyModifiedNotification,
    #[doc(alias = "GEDIT_TAB_NUM_OF_STATES")]
    NumOfStates,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for TabState {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "TabState::{}", match *self {
            Self::StateNormal => "StateNormal",
            Self::StateLoading => "StateLoading",
            Self::StateReverting => "StateReverting",
            Self::StateSaving => "StateSaving",
            Self::StatePrinting => "StatePrinting",
            Self::StateShowingPrintPreview => "StateShowingPrintPreview",
            Self::StateLoadingError => "StateLoadingError",
            Self::StateRevertingError => "StateRevertingError",
            Self::StateSavingError => "StateSavingError",
            Self::StateGenericError => "StateGenericError",
            Self::StateClosing => "StateClosing",
            Self::StateExternallyModifiedNotification => "StateExternallyModifiedNotification",
            Self::NumOfStates => "NumOfStates",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for TabState {
    type GlibType = ffi::GeditTabState;

    fn into_glib(self) -> ffi::GeditTabState {
        match self {
            Self::StateNormal => ffi::GEDIT_TAB_STATE_NORMAL,
            Self::StateLoading => ffi::GEDIT_TAB_STATE_LOADING,
            Self::StateReverting => ffi::GEDIT_TAB_STATE_REVERTING,
            Self::StateSaving => ffi::GEDIT_TAB_STATE_SAVING,
            Self::StatePrinting => ffi::GEDIT_TAB_STATE_PRINTING,
            Self::StateShowingPrintPreview => ffi::GEDIT_TAB_STATE_SHOWING_PRINT_PREVIEW,
            Self::StateLoadingError => ffi::GEDIT_TAB_STATE_LOADING_ERROR,
            Self::StateRevertingError => ffi::GEDIT_TAB_STATE_REVERTING_ERROR,
            Self::StateSavingError => ffi::GEDIT_TAB_STATE_SAVING_ERROR,
            Self::StateGenericError => ffi::GEDIT_TAB_STATE_GENERIC_ERROR,
            Self::StateClosing => ffi::GEDIT_TAB_STATE_CLOSING,
            Self::StateExternallyModifiedNotification => ffi::GEDIT_TAB_STATE_EXTERNALLY_MODIFIED_NOTIFICATION,
            Self::NumOfStates => ffi::GEDIT_TAB_NUM_OF_STATES,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GeditTabState> for TabState {
    unsafe fn from_glib(value: ffi::GeditTabState) -> Self {
        skip_assert_initialized!();
        match value {
            ffi::GEDIT_TAB_STATE_NORMAL => Self::StateNormal,
            ffi::GEDIT_TAB_STATE_LOADING => Self::StateLoading,
            ffi::GEDIT_TAB_STATE_REVERTING => Self::StateReverting,
            ffi::GEDIT_TAB_STATE_SAVING => Self::StateSaving,
            ffi::GEDIT_TAB_STATE_PRINTING => Self::StatePrinting,
            ffi::GEDIT_TAB_STATE_SHOWING_PRINT_PREVIEW => Self::StateShowingPrintPreview,
            ffi::GEDIT_TAB_STATE_LOADING_ERROR => Self::StateLoadingError,
            ffi::GEDIT_TAB_STATE_REVERTING_ERROR => Self::StateRevertingError,
            ffi::GEDIT_TAB_STATE_SAVING_ERROR => Self::StateSavingError,
            ffi::GEDIT_TAB_STATE_GENERIC_ERROR => Self::StateGenericError,
            ffi::GEDIT_TAB_STATE_CLOSING => Self::StateClosing,
            ffi::GEDIT_TAB_STATE_EXTERNALLY_MODIFIED_NOTIFICATION => Self::StateExternallyModifiedNotification,
            ffi::GEDIT_TAB_NUM_OF_STATES => Self::NumOfStates,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for TabState {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gedit_tab_state_get_type()) }
    }
}

impl glib::value::ValueType for TabState {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for TabState {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for TabState {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

