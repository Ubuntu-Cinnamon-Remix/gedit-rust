// Generated by gir (https://github.com/gtk-rs/gir @ 81e2ef9e1ab7)
// from ../../gir-files (@ 3b6fe0a33676)
// DO NOT EDIT

use gedit_sys::*;
use std::mem::{align_of, size_of};
use std::env;
use std::error::Error;
use std::ffi::OsString;
use std::path::Path;
use std::process::Command;
use std::str;
use tempfile::Builder;

static PACKAGES: &[&str] = &["gedit"];

#[derive(Clone, Debug)]
struct Compiler {
    pub args: Vec<String>,
}

impl Compiler {
    pub fn new() -> Result<Self, Box<dyn Error>> {
        let mut args = get_var("CC", "cc")?;
        args.push("-Wno-deprecated-declarations".to_owned());
        // For _Generic
        args.push("-std=c11".to_owned());
        // For %z support in printf when using MinGW.
        args.push("-D__USE_MINGW_ANSI_STDIO".to_owned());
        args.extend(get_var("CFLAGS", "")?);
        args.extend(get_var("CPPFLAGS", "")?);
        args.extend(pkg_config_cflags(PACKAGES)?);
        Ok(Self { args })
    }

    pub fn compile(&self, src: &Path, out: &Path) -> Result<(), Box<dyn Error>> {
        let mut cmd = self.to_command();
        cmd.arg(src);
        cmd.arg("-o");
        cmd.arg(out);
        let status = cmd.spawn()?.wait()?;
        if !status.success() {
            return Err(format!("compilation command {:?} failed, {}", &cmd, status).into());
        }
        Ok(())
    }

    fn to_command(&self) -> Command {
        let mut cmd = Command::new(&self.args[0]);
        cmd.args(&self.args[1..]);
        cmd
    }
}

fn get_var(name: &str, default: &str) -> Result<Vec<String>, Box<dyn Error>> {
    match env::var(name) {
        Ok(value) => Ok(shell_words::split(&value)?),
        Err(env::VarError::NotPresent) => Ok(shell_words::split(default)?),
        Err(err) => Err(format!("{} {}", name, err).into()),
    }
}

fn pkg_config_cflags(packages: &[&str]) -> Result<Vec<String>, Box<dyn Error>> {
    if packages.is_empty() {
        return Ok(Vec::new());
    }
    let pkg_config = env::var_os("PKG_CONFIG")
        .unwrap_or_else(|| OsString::from("pkg-config"));
    let mut cmd = Command::new(pkg_config);
    cmd.arg("--cflags");
    cmd.args(packages);
    let out = cmd.output()?;
    if !out.status.success() {
        return Err(format!("command {:?} returned {}",
                           &cmd, out.status).into());
    }
    let stdout = str::from_utf8(&out.stdout)?;
    Ok(shell_words::split(stdout.trim())?)
}


#[derive(Copy, Clone, Debug, Eq, PartialEq)]
struct Layout {
    size: usize,
    alignment: usize,
}

#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
struct Results {
    /// Number of successfully completed tests.
    passed: usize,
    /// Total number of failed tests (including those that failed to compile).
    failed: usize,
}

impl Results {
    fn record_passed(&mut self) {
        self.passed += 1;
    }
    fn record_failed(&mut self) {
        self.failed += 1;
    }
    fn summary(&self) -> String {
        format!("{} passed; {} failed", self.passed, self.failed)
    }
    fn expect_total_success(&self) {
        if self.failed == 0 {
            println!("OK: {}", self.summary());
        } else {
            panic!("FAILED: {}", self.summary());
        };
    }
}

#[test]
#[cfg(target_os = "linux")]
fn cross_validate_constants_with_c() {
    let mut c_constants: Vec<(String, String)> = Vec::new();

    for l in get_c_output("constant").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing ';' separator");
        c_constants.push((name.to_owned(), value.to_owned()));
    }

    let mut results = Results::default();

    for ((rust_name, rust_value), (c_name, c_value)) in
        RUST_CONSTANTS.iter().zip(c_constants.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {:?}\nC:    {:?}", rust_name, c_name,);
            continue;
        }

        if rust_value != c_value {
            results.record_failed();
            eprintln!(
                "Constant value mismatch for {}\nRust: {:?}\nC:    {:?}",
                rust_name, rust_value, &c_value
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

#[test]
#[cfg(target_os = "linux")]
fn cross_validate_layout_with_c() {
    let mut c_layouts = Vec::new();

    for l in get_c_output("layout").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing first ';' separator");
        let (size, alignment) = value.split_once(';').expect("Missing second ';' separator");
        let size = size.parse().expect("Failed to parse size");
        let alignment = alignment.parse().expect("Failed to parse alignment");
        c_layouts.push((name.to_owned(), Layout { size, alignment }));
    }

    let mut results = Results::default();

    for ((rust_name, rust_layout), (c_name, c_layout)) in
        RUST_LAYOUTS.iter().zip(c_layouts.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {:?}\nC:    {:?}", rust_name, c_name,);
            continue;
        }

        if rust_layout != c_layout {
            results.record_failed();
            eprintln!(
                "Layout mismatch for {}\nRust: {:?}\nC:    {:?}",
                rust_name, rust_layout, &c_layout
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

fn get_c_output(name: &str) -> Result<String, Box<dyn Error>> {
    let tmpdir = Builder::new().prefix("abi").tempdir()?;
    let exe = tmpdir.path().join(name);
    let c_file = Path::new("tests").join(name).with_extension("c");

    let cc = Compiler::new().expect("configured compiler");
    cc.compile(&c_file, &exe)?;

    let mut abi_cmd = Command::new(exe);
    let output = abi_cmd.output()?;
    if !output.status.success() {
        return Err(format!("command {:?} failed, {:?}", &abi_cmd, &output).into());
    }

    Ok(String::from_utf8(output.stdout)?)
}

const RUST_LAYOUTS: &[(&str, Layout)] = &[
    ("GeditApp", Layout {size: size_of::<GeditApp>(), alignment: align_of::<GeditApp>()}),
    ("GeditAppActivatableInterface", Layout {size: size_of::<GeditAppActivatableInterface>(), alignment: align_of::<GeditAppActivatableInterface>()}),
    ("GeditAppClass", Layout {size: size_of::<GeditAppClass>(), alignment: align_of::<GeditAppClass>()}),
    ("GeditDebugSection", Layout {size: size_of::<GeditDebugSection>(), alignment: align_of::<GeditDebugSection>()}),
    ("GeditDocument", Layout {size: size_of::<GeditDocument>(), alignment: align_of::<GeditDocument>()}),
    ("GeditDocumentClass", Layout {size: size_of::<GeditDocumentClass>(), alignment: align_of::<GeditDocumentClass>()}),
    ("GeditEncodingsComboBoxClass", Layout {size: size_of::<GeditEncodingsComboBoxClass>(), alignment: align_of::<GeditEncodingsComboBoxClass>()}),
    ("GeditMenuExtensionClass", Layout {size: size_of::<GeditMenuExtensionClass>(), alignment: align_of::<GeditMenuExtensionClass>()}),
    ("GeditMessage", Layout {size: size_of::<GeditMessage>(), alignment: align_of::<GeditMessage>()}),
    ("GeditMessageBus", Layout {size: size_of::<GeditMessageBus>(), alignment: align_of::<GeditMessageBus>()}),
    ("GeditMessageBusClass", Layout {size: size_of::<GeditMessageBusClass>(), alignment: align_of::<GeditMessageBusClass>()}),
    ("GeditMessageClass", Layout {size: size_of::<GeditMessageClass>(), alignment: align_of::<GeditMessageClass>()}),
    ("GeditProgressInfoBarClass", Layout {size: size_of::<GeditProgressInfoBarClass>(), alignment: align_of::<GeditProgressInfoBarClass>()}),
    ("GeditStatusbarClass", Layout {size: size_of::<GeditStatusbarClass>(), alignment: align_of::<GeditStatusbarClass>()}),
    ("GeditTabClass", Layout {size: size_of::<GeditTabClass>(), alignment: align_of::<GeditTabClass>()}),
    ("GeditTabState", Layout {size: size_of::<GeditTabState>(), alignment: align_of::<GeditTabState>()}),
    ("GeditView", Layout {size: size_of::<GeditView>(), alignment: align_of::<GeditView>()}),
    ("GeditViewActivatableInterface", Layout {size: size_of::<GeditViewActivatableInterface>(), alignment: align_of::<GeditViewActivatableInterface>()}),
    ("GeditViewClass", Layout {size: size_of::<GeditViewClass>(), alignment: align_of::<GeditViewClass>()}),
    ("GeditWindow", Layout {size: size_of::<GeditWindow>(), alignment: align_of::<GeditWindow>()}),
    ("GeditWindowActivatableInterface", Layout {size: size_of::<GeditWindowActivatableInterface>(), alignment: align_of::<GeditWindowActivatableInterface>()}),
    ("GeditWindowClass", Layout {size: size_of::<GeditWindowClass>(), alignment: align_of::<GeditWindowClass>()}),
    ("GeditWindowState", Layout {size: size_of::<GeditWindowState>(), alignment: align_of::<GeditWindowState>()}),
];

const RUST_CONSTANTS: &[(&str, &str)] = &[
    ("(guint) GEDIT_DEBUG_APP", "256"),
    ("(guint) GEDIT_DEBUG_COMMANDS", "128"),
    ("(guint) GEDIT_DEBUG_DOCUMENT", "64"),
    ("(guint) GEDIT_DEBUG_METADATA", "1024"),
    ("(guint) GEDIT_DEBUG_PANEL", "8"),
    ("(guint) GEDIT_DEBUG_PLUGINS", "16"),
    ("(guint) GEDIT_DEBUG_PREFS", "2"),
    ("(guint) GEDIT_DEBUG_TAB", "32"),
    ("(guint) GEDIT_DEBUG_UTILS", "512"),
    ("(guint) GEDIT_DEBUG_VIEW", "1"),
    ("(guint) GEDIT_DEBUG_WINDOW", "4"),
    ("(guint) GEDIT_NO_DEBUG", "0"),
    ("(gint) GEDIT_TAB_NUM_OF_STATES", "12"),
    ("(gint) GEDIT_TAB_STATE_CLOSING", "10"),
    ("(gint) GEDIT_TAB_STATE_EXTERNALLY_MODIFIED_NOTIFICATION", "11"),
    ("(gint) GEDIT_TAB_STATE_GENERIC_ERROR", "9"),
    ("(gint) GEDIT_TAB_STATE_LOADING", "1"),
    ("(gint) GEDIT_TAB_STATE_LOADING_ERROR", "6"),
    ("(gint) GEDIT_TAB_STATE_NORMAL", "0"),
    ("(gint) GEDIT_TAB_STATE_PRINTING", "4"),
    ("(gint) GEDIT_TAB_STATE_REVERTING", "2"),
    ("(gint) GEDIT_TAB_STATE_REVERTING_ERROR", "7"),
    ("(gint) GEDIT_TAB_STATE_SAVING", "3"),
    ("(gint) GEDIT_TAB_STATE_SAVING_ERROR", "8"),
    ("(gint) GEDIT_TAB_STATE_SHOWING_PRINT_PREVIEW", "5"),
    ("(guint) GEDIT_WINDOW_STATE_ERROR", "16"),
    ("(guint) GEDIT_WINDOW_STATE_LOADING", "8"),
    ("(guint) GEDIT_WINDOW_STATE_NORMAL", "0"),
    ("(guint) GEDIT_WINDOW_STATE_PRINTING", "4"),
    ("(guint) GEDIT_WINDOW_STATE_SAVING", "2"),
];


