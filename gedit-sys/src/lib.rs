// Generated by gir (https://github.com/gtk-rs/gir @ 81e2ef9e1ab7)
// from ../../gir-files (@ 3b6fe0a33676)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(feature = "dox", feature(doc_cfg))]


#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type GeditTabState = c_int;
pub const GEDIT_TAB_STATE_NORMAL: GeditTabState = 0;
pub const GEDIT_TAB_STATE_LOADING: GeditTabState = 1;
pub const GEDIT_TAB_STATE_REVERTING: GeditTabState = 2;
pub const GEDIT_TAB_STATE_SAVING: GeditTabState = 3;
pub const GEDIT_TAB_STATE_PRINTING: GeditTabState = 4;
pub const GEDIT_TAB_STATE_SHOWING_PRINT_PREVIEW: GeditTabState = 5;
pub const GEDIT_TAB_STATE_LOADING_ERROR: GeditTabState = 6;
pub const GEDIT_TAB_STATE_REVERTING_ERROR: GeditTabState = 7;
pub const GEDIT_TAB_STATE_SAVING_ERROR: GeditTabState = 8;
pub const GEDIT_TAB_STATE_GENERIC_ERROR: GeditTabState = 9;
pub const GEDIT_TAB_STATE_CLOSING: GeditTabState = 10;
pub const GEDIT_TAB_STATE_EXTERNALLY_MODIFIED_NOTIFICATION: GeditTabState = 11;
pub const GEDIT_TAB_NUM_OF_STATES: GeditTabState = 12;

// Flags
pub type GeditDebugSection = c_uint;
pub const GEDIT_NO_DEBUG: GeditDebugSection = 0;
pub const GEDIT_DEBUG_VIEW: GeditDebugSection = 1;
pub const GEDIT_DEBUG_PREFS: GeditDebugSection = 2;
pub const GEDIT_DEBUG_WINDOW: GeditDebugSection = 4;
pub const GEDIT_DEBUG_PANEL: GeditDebugSection = 8;
pub const GEDIT_DEBUG_PLUGINS: GeditDebugSection = 16;
pub const GEDIT_DEBUG_TAB: GeditDebugSection = 32;
pub const GEDIT_DEBUG_DOCUMENT: GeditDebugSection = 64;
pub const GEDIT_DEBUG_COMMANDS: GeditDebugSection = 128;
pub const GEDIT_DEBUG_APP: GeditDebugSection = 256;
pub const GEDIT_DEBUG_UTILS: GeditDebugSection = 512;
pub const GEDIT_DEBUG_METADATA: GeditDebugSection = 1024;

pub type GeditWindowState = c_uint;
pub const GEDIT_WINDOW_STATE_NORMAL: GeditWindowState = 0;
pub const GEDIT_WINDOW_STATE_SAVING: GeditWindowState = 2;
pub const GEDIT_WINDOW_STATE_PRINTING: GeditWindowState = 4;
pub const GEDIT_WINDOW_STATE_LOADING: GeditWindowState = 8;
pub const GEDIT_WINDOW_STATE_ERROR: GeditWindowState = 16;

// Callbacks
pub type GeditMessageBusForeach = Option<unsafe extern "C" fn(*const c_char, *const c_char, gpointer)>;
pub type GeditMessageCallback = Option<unsafe extern "C" fn(*mut GeditMessageBus, *mut GeditMessage, gpointer)>;

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditAppActivatableInterface {
    pub g_iface: gobject::GTypeInterface,
    pub activate: Option<unsafe extern "C" fn(*mut GeditAppActivatable)>,
    pub deactivate: Option<unsafe extern "C" fn(*mut GeditAppActivatable)>,
}

impl ::std::fmt::Debug for GeditAppActivatableInterface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditAppActivatableInterface @ {self:p}"))
         .field("g_iface", &self.g_iface)
         .field("activate", &self.activate)
         .field("deactivate", &self.deactivate)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditAppClass {
    pub parent_class: gtk::GtkApplicationClass,
    pub show_help: Option<unsafe extern "C" fn(*mut GeditApp, *mut gtk::GtkWindow, *const c_char, *const c_char) -> gboolean>,
    pub help_link_id: Option<unsafe extern "C" fn(*mut GeditApp, *const c_char, *const c_char) -> *mut c_char>,
    pub set_window_title: Option<unsafe extern "C" fn(*mut GeditApp, *mut GeditWindow, *const c_char)>,
    pub create_window: Option<unsafe extern "C" fn(*mut GeditApp) -> *mut GeditWindow>,
    pub process_window_event: Option<unsafe extern "C" fn(*mut GeditApp, *mut GeditWindow, *mut gdk::GdkEvent) -> gboolean>,
}

impl ::std::fmt::Debug for GeditAppClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditAppClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .field("show_help", &self.show_help)
         .field("help_link_id", &self.help_link_id)
         .field("set_window_title", &self.set_window_title)
         .field("create_window", &self.create_window)
         .field("process_window_event", &self.process_window_event)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditDocumentClass {
    pub parent_class: gtk_source::GtkSourceBufferClass,
    pub cursor_moved: Option<unsafe extern "C" fn(*mut GeditDocument)>,
    pub load: Option<unsafe extern "C" fn(*mut GeditDocument)>,
    pub loaded: Option<unsafe extern "C" fn(*mut GeditDocument)>,
    pub save: Option<unsafe extern "C" fn(*mut GeditDocument)>,
    pub saved: Option<unsafe extern "C" fn(*mut GeditDocument)>,
}

impl ::std::fmt::Debug for GeditDocumentClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditDocumentClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .field("cursor_moved", &self.cursor_moved)
         .field("load", &self.load)
         .field("loaded", &self.loaded)
         .field("save", &self.save)
         .field("saved", &self.saved)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditEncodingsComboBoxClass {
    pub parent_class: gtk::GtkComboBoxClass,
}

impl ::std::fmt::Debug for GeditEncodingsComboBoxClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditEncodingsComboBoxClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditMenuExtensionClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for GeditMenuExtensionClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditMenuExtensionClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditMessageBusClass {
    pub parent_class: gobject::GObjectClass,
    pub dispatch: Option<unsafe extern "C" fn(*mut GeditMessageBus, *mut GeditMessage)>,
    pub registered: Option<unsafe extern "C" fn(*mut GeditMessageBus, *const c_char, *const c_char)>,
    pub unregistered: Option<unsafe extern "C" fn(*mut GeditMessageBus, *const c_char, *const c_char)>,
}

impl ::std::fmt::Debug for GeditMessageBusClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditMessageBusClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .field("dispatch", &self.dispatch)
         .field("registered", &self.registered)
         .field("unregistered", &self.unregistered)
         .finish()
    }
}

#[repr(C)]
pub struct _GeditMessageBusPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GeditMessageBusPrivate = *mut _GeditMessageBusPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditMessageClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for GeditMessageClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditMessageClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _GeditMessagePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GeditMessagePrivate = *mut _GeditMessagePrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditProgressInfoBarClass {
    pub parent_class: gtk::GtkInfoBarClass,
}

impl ::std::fmt::Debug for GeditProgressInfoBarClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditProgressInfoBarClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditStatusbarClass {
    pub parent_class: gtk::GtkStatusbarClass,
}

impl ::std::fmt::Debug for GeditStatusbarClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditStatusbarClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditTabClass {
    pub parent_class: gtk::GtkBoxClass,
}

impl ::std::fmt::Debug for GeditTabClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditTabClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditViewActivatableInterface {
    pub g_iface: gobject::GTypeInterface,
    pub activate: Option<unsafe extern "C" fn(*mut GeditViewActivatable)>,
    pub deactivate: Option<unsafe extern "C" fn(*mut GeditViewActivatable)>,
}

impl ::std::fmt::Debug for GeditViewActivatableInterface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditViewActivatableInterface @ {self:p}"))
         .field("g_iface", &self.g_iface)
         .field("activate", &self.activate)
         .field("deactivate", &self.deactivate)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditViewClass {
    pub parent_class: gtk_source::GtkSourceViewClass,
    pub drop_uris: Option<unsafe extern "C" fn(*mut GeditView, *mut *mut c_char)>,
    pub padding: gpointer,
}

impl ::std::fmt::Debug for GeditViewClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditViewClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .field("drop_uris", &self.drop_uris)
         .field("padding", &self.padding)
         .finish()
    }
}

#[repr(C)]
pub struct _GeditViewPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GeditViewPrivate = *mut _GeditViewPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditWindowActivatableInterface {
    pub g_iface: gobject::GTypeInterface,
    pub activate: Option<unsafe extern "C" fn(*mut GeditWindowActivatable)>,
    pub deactivate: Option<unsafe extern "C" fn(*mut GeditWindowActivatable)>,
    pub update_state: Option<unsafe extern "C" fn(*mut GeditWindowActivatable)>,
}

impl ::std::fmt::Debug for GeditWindowActivatableInterface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditWindowActivatableInterface @ {self:p}"))
         .field("g_iface", &self.g_iface)
         .field("activate", &self.activate)
         .field("deactivate", &self.deactivate)
         .field("update_state", &self.update_state)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditWindowClass {
    pub parent_class: gtk::GtkApplicationWindowClass,
    pub tab_added: Option<unsafe extern "C" fn(*mut GeditWindow, *mut GeditTab)>,
    pub tab_removed: Option<unsafe extern "C" fn(*mut GeditWindow, *mut GeditTab)>,
    pub tabs_reordered: Option<unsafe extern "C" fn(*mut GeditWindow)>,
    pub active_tab_changed: Option<unsafe extern "C" fn(*mut GeditWindow, *mut GeditTab)>,
    pub active_tab_state_changed: Option<unsafe extern "C" fn(*mut GeditWindow)>,
}

impl ::std::fmt::Debug for GeditWindowClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditWindowClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .field("tab_added", &self.tab_added)
         .field("tab_removed", &self.tab_removed)
         .field("tabs_reordered", &self.tabs_reordered)
         .field("active_tab_changed", &self.active_tab_changed)
         .field("active_tab_state_changed", &self.active_tab_state_changed)
         .finish()
    }
}

#[repr(C)]
pub struct _GeditWindowPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GeditWindowPrivate = *mut _GeditWindowPrivate;

// Classes
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditApp {
    pub parent_instance: gtk::GtkApplication,
}

impl ::std::fmt::Debug for GeditApp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditApp @ {self:p}"))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditDocument {
    pub parent_instance: gtk_source::GtkSourceBuffer,
}

impl ::std::fmt::Debug for GeditDocument {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditDocument @ {self:p}"))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
pub struct GeditEncodingsComboBox {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for GeditEncodingsComboBox {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditEncodingsComboBox @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct GeditMenuExtension {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for GeditMenuExtension {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditMenuExtension @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditMessage {
    pub parent: gobject::GObject,
    pub priv_: *mut GeditMessagePrivate,
}

impl ::std::fmt::Debug for GeditMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditMessage @ {self:p}"))
         .field("parent", &self.parent)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditMessageBus {
    pub parent: gobject::GObject,
    pub priv_: *mut GeditMessageBusPrivate,
}

impl ::std::fmt::Debug for GeditMessageBus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditMessageBus @ {self:p}"))
         .field("parent", &self.parent)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
pub struct GeditProgressInfoBar {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for GeditProgressInfoBar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditProgressInfoBar @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct GeditStatusbar {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for GeditStatusbar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditStatusbar @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct GeditTab {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for GeditTab {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditTab @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditView {
    pub view: gtk_source::GtkSourceView,
    pub priv_: *mut GeditViewPrivate,
}

impl ::std::fmt::Debug for GeditView {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditView @ {self:p}"))
         .field("view", &self.view)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GeditWindow {
    pub window: gtk::GtkApplicationWindow,
    pub priv_: *mut GeditWindowPrivate,
}

impl ::std::fmt::Debug for GeditWindow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GeditWindow @ {self:p}"))
         .field("window", &self.window)
         .finish()
    }
}

// Interfaces
#[repr(C)]
pub struct GeditAppActivatable {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for GeditAppActivatable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "GeditAppActivatable @ {self:p}")
    }
}

#[repr(C)]
pub struct GeditViewActivatable {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for GeditViewActivatable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "GeditViewActivatable @ {self:p}")
    }
}

#[repr(C)]
pub struct GeditWindowActivatable {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for GeditWindowActivatable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "GeditWindowActivatable @ {self:p}")
    }
}


#[link(name = "gedit-41")]
extern "C" {

    //=========================================================================
    // GeditTabState
    //=========================================================================
    pub fn gedit_tab_state_get_type() -> GType;

    //=========================================================================
    // GeditDebugSection
    //=========================================================================
    pub fn gedit_debug_section_get_type() -> GType;

    //=========================================================================
    // GeditWindowState
    //=========================================================================
    pub fn gedit_window_state_get_type() -> GType;

    //=========================================================================
    // GeditApp
    //=========================================================================
    pub fn gedit_app_get_type() -> GType;
    pub fn gedit_app_create_window(app: *mut GeditApp, screen: *mut gdk::GdkScreen) -> *mut GeditWindow;
    pub fn gedit_app_get_documents(app: *mut GeditApp) -> *mut glib::GList;
    pub fn gedit_app_get_main_windows(app: *mut GeditApp) -> *mut glib::GList;
    pub fn gedit_app_get_views(app: *mut GeditApp) -> *mut glib::GList;
    pub fn gedit_app_process_window_event(app: *mut GeditApp, window: *mut GeditWindow, event: *mut gdk::GdkEvent) -> gboolean;
    pub fn gedit_app_set_window_title(app: *mut GeditApp, window: *mut GeditWindow, title: *const c_char);
    pub fn gedit_app_show_help(app: *mut GeditApp, parent: *mut gtk::GtkWindow, name: *const c_char, link_id: *const c_char) -> gboolean;

    //=========================================================================
    // GeditDocument
    //=========================================================================
    pub fn gedit_document_get_type() -> GType;
    pub fn gedit_document_new() -> *mut GeditDocument;
    pub fn gedit_document_get_content_type(doc: *mut GeditDocument) -> *mut c_char;
    pub fn gedit_document_get_file(doc: *mut GeditDocument) -> *mut gtk_source::GtkSourceFile;
    pub fn gedit_document_get_language(doc: *mut GeditDocument) -> *mut gtk_source::GtkSourceLanguage;
    pub fn gedit_document_get_metadata(doc: *mut GeditDocument, key: *const c_char) -> *mut c_char;
    pub fn gedit_document_get_mime_type(doc: *mut GeditDocument) -> *mut c_char;
    pub fn gedit_document_get_search_context(doc: *mut GeditDocument) -> *mut gtk_source::GtkSourceSearchContext;
    pub fn gedit_document_get_short_name_for_display(doc: *mut GeditDocument) -> *mut c_char;
    pub fn gedit_document_goto_line(doc: *mut GeditDocument, line: c_int) -> gboolean;
    pub fn gedit_document_goto_line_offset(doc: *mut GeditDocument, line: c_int, line_offset: c_int) -> gboolean;
    pub fn gedit_document_is_untitled(doc: *mut GeditDocument) -> gboolean;
    pub fn gedit_document_is_untouched(doc: *mut GeditDocument) -> gboolean;
    pub fn gedit_document_set_language(doc: *mut GeditDocument, lang: *mut gtk_source::GtkSourceLanguage);
    pub fn gedit_document_set_metadata(doc: *mut GeditDocument, first_key: *const c_char, ...);
    pub fn gedit_document_set_search_context(doc: *mut GeditDocument, search_context: *mut gtk_source::GtkSourceSearchContext);

    //=========================================================================
    // GeditEncodingsComboBox
    //=========================================================================
    pub fn gedit_encodings_combo_box_get_type() -> GType;
    pub fn gedit_encodings_combo_box_new(save_mode: gboolean) -> *mut gtk::GtkWidget;
    pub fn gedit_encodings_combo_box_get_selected_encoding(menu: *mut GeditEncodingsComboBox) -> *const gtk_source::GtkSourceEncoding;
    pub fn gedit_encodings_combo_box_set_selected_encoding(menu: *mut GeditEncodingsComboBox, encoding: *const gtk_source::GtkSourceEncoding);

    //=========================================================================
    // GeditMenuExtension
    //=========================================================================
    pub fn gedit_menu_extension_get_type() -> GType;
    pub fn gedit_menu_extension_new(menu: *mut gio::GMenu) -> *mut GeditMenuExtension;
    pub fn gedit_menu_extension_append_menu_item(menu: *mut GeditMenuExtension, item: *mut gio::GMenuItem);
    pub fn gedit_menu_extension_prepend_menu_item(menu: *mut GeditMenuExtension, item: *mut gio::GMenuItem);
    pub fn gedit_menu_extension_remove_items(menu: *mut GeditMenuExtension);

    //=========================================================================
    // GeditMessage
    //=========================================================================
    pub fn gedit_message_get_type() -> GType;
    pub fn gedit_message_is_valid_object_path(object_path: *const c_char) -> gboolean;
    pub fn gedit_message_type_check(gtype: GType, propname: *const c_char, value_type: GType) -> gboolean;
    pub fn gedit_message_type_has(gtype: GType, propname: *const c_char) -> gboolean;
    pub fn gedit_message_type_identifier(object_path: *const c_char, method: *const c_char) -> *mut c_char;
    pub fn gedit_message_get_method(message: *mut GeditMessage) -> *const c_char;
    pub fn gedit_message_get_object_path(message: *mut GeditMessage) -> *const c_char;
    pub fn gedit_message_has(message: *mut GeditMessage, propname: *const c_char) -> gboolean;

    //=========================================================================
    // GeditMessageBus
    //=========================================================================
    pub fn gedit_message_bus_get_type() -> GType;
    pub fn gedit_message_bus_new() -> *mut GeditMessageBus;
    pub fn gedit_message_bus_get_default() -> *mut GeditMessageBus;
    pub fn gedit_message_bus_block(bus: *mut GeditMessageBus, id: c_uint);
    pub fn gedit_message_bus_block_by_func(bus: *mut GeditMessageBus, object_path: *const c_char, method: *const c_char, callback: GeditMessageCallback, user_data: gpointer);
    pub fn gedit_message_bus_connect(bus: *mut GeditMessageBus, object_path: *const c_char, method: *const c_char, callback: GeditMessageCallback, user_data: gpointer, destroy_data: glib::GDestroyNotify) -> c_uint;
    pub fn gedit_message_bus_disconnect(bus: *mut GeditMessageBus, id: c_uint);
    pub fn gedit_message_bus_disconnect_by_func(bus: *mut GeditMessageBus, object_path: *const c_char, method: *const c_char, callback: GeditMessageCallback, user_data: gpointer);
    pub fn gedit_message_bus_foreach(bus: *mut GeditMessageBus, func: GeditMessageBusForeach, user_data: gpointer);
    pub fn gedit_message_bus_is_registered(bus: *mut GeditMessageBus, object_path: *const c_char, method: *const c_char) -> gboolean;
    pub fn gedit_message_bus_lookup(bus: *mut GeditMessageBus, object_path: *const c_char, method: *const c_char) -> GType;
    pub fn gedit_message_bus_register(bus: *mut GeditMessageBus, message_type: GType, object_path: *const c_char, method: *const c_char);
    pub fn gedit_message_bus_send(bus: *mut GeditMessageBus, object_path: *const c_char, method: *const c_char, first_property: *const c_char, ...);
    pub fn gedit_message_bus_send_message(bus: *mut GeditMessageBus, message: *mut GeditMessage);
    pub fn gedit_message_bus_send_message_sync(bus: *mut GeditMessageBus, message: *mut GeditMessage);
    pub fn gedit_message_bus_send_sync(bus: *mut GeditMessageBus, object_path: *const c_char, method: *const c_char, first_property: *const c_char, ...) -> *mut GeditMessage;
    pub fn gedit_message_bus_unblock(bus: *mut GeditMessageBus, id: c_uint);
    pub fn gedit_message_bus_unblock_by_func(bus: *mut GeditMessageBus, object_path: *const c_char, method: *const c_char, callback: GeditMessageCallback, user_data: gpointer);
    pub fn gedit_message_bus_unregister(bus: *mut GeditMessageBus, object_path: *const c_char, method: *const c_char);
    pub fn gedit_message_bus_unregister_all(bus: *mut GeditMessageBus, object_path: *const c_char);

    //=========================================================================
    // GeditProgressInfoBar
    //=========================================================================
    pub fn gedit_progress_info_bar_get_type() -> GType;
    pub fn gedit_progress_info_bar_new(icon_name: *const c_char, markup: *const c_char, has_cancel: gboolean) -> *mut gtk::GtkWidget;
    pub fn gedit_progress_info_bar_pulse(bar: *mut GeditProgressInfoBar);
    pub fn gedit_progress_info_bar_set_fraction(bar: *mut GeditProgressInfoBar, fraction: c_double);
    pub fn gedit_progress_info_bar_set_icon_name(bar: *mut GeditProgressInfoBar, icon_name: *const c_char);
    pub fn gedit_progress_info_bar_set_markup(bar: *mut GeditProgressInfoBar, markup: *const c_char);
    pub fn gedit_progress_info_bar_set_text(bar: *mut GeditProgressInfoBar, text: *const c_char);

    //=========================================================================
    // GeditStatusbar
    //=========================================================================
    pub fn gedit_statusbar_get_type() -> GType;
    pub fn gedit_statusbar_new() -> *mut gtk::GtkWidget;
    pub fn gedit_statusbar_clear_overwrite(statusbar: *mut GeditStatusbar);
    pub fn gedit_statusbar_flash_message(statusbar: *mut GeditStatusbar, context_id: c_uint, format: *const c_char, ...);
    pub fn gedit_statusbar_set_overwrite(statusbar: *mut GeditStatusbar, overwrite: gboolean);
    pub fn gedit_statusbar_set_window_state(statusbar: *mut GeditStatusbar, state: GeditWindowState, num_of_errors: c_int);

    //=========================================================================
    // GeditTab
    //=========================================================================
    pub fn gedit_tab_get_type() -> GType;
    pub fn gedit_tab_get_from_document(doc: *mut GeditDocument) -> *mut GeditTab;
    pub fn gedit_tab_get_auto_save_enabled(tab: *mut GeditTab) -> gboolean;
    pub fn gedit_tab_get_auto_save_interval(tab: *mut GeditTab) -> c_int;
    pub fn gedit_tab_get_document(tab: *mut GeditTab) -> *mut GeditDocument;
    pub fn gedit_tab_get_state(tab: *mut GeditTab) -> GeditTabState;
    pub fn gedit_tab_get_view(tab: *mut GeditTab) -> *mut GeditView;
    pub fn gedit_tab_set_auto_save_enabled(tab: *mut GeditTab, enable: gboolean);
    pub fn gedit_tab_set_auto_save_interval(tab: *mut GeditTab, interval: c_int);
    pub fn gedit_tab_set_info_bar(tab: *mut GeditTab, info_bar: *mut gtk::GtkWidget);

    //=========================================================================
    // GeditView
    //=========================================================================
    pub fn gedit_view_get_type() -> GType;
    pub fn gedit_view_new(doc: *mut GeditDocument) -> *mut gtk::GtkWidget;
    pub fn gedit_view_copy_clipboard(view: *mut GeditView);
    pub fn gedit_view_cut_clipboard(view: *mut GeditView);
    pub fn gedit_view_delete_selection(view: *mut GeditView);
    pub fn gedit_view_paste_clipboard(view: *mut GeditView);
    pub fn gedit_view_scroll_to_cursor(view: *mut GeditView);
    pub fn gedit_view_select_all(view: *mut GeditView);
    pub fn gedit_view_set_font(view: *mut GeditView, default_font: gboolean, font_name: *const c_char);

    //=========================================================================
    // GeditWindow
    //=========================================================================
    pub fn gedit_window_get_type() -> GType;
    pub fn gedit_window_close_all_tabs(window: *mut GeditWindow);
    pub fn gedit_window_close_tab(window: *mut GeditWindow, tab: *mut GeditTab);
    pub fn gedit_window_close_tabs(window: *mut GeditWindow, tabs: *const glib::GList);
    pub fn gedit_window_create_tab(window: *mut GeditWindow, jump_to: gboolean) -> *mut GeditTab;
    pub fn gedit_window_create_tab_from_location(window: *mut GeditWindow, location: *mut gio::GFile, encoding: *const gtk_source::GtkSourceEncoding, line_pos: c_int, column_pos: c_int, create: gboolean, jump_to: gboolean) -> *mut GeditTab;
    pub fn gedit_window_create_tab_from_stream(window: *mut GeditWindow, stream: *mut gio::GInputStream, encoding: *const gtk_source::GtkSourceEncoding, line_pos: c_int, column_pos: c_int, jump_to: gboolean) -> *mut GeditTab;
    pub fn gedit_window_get_active_document(window: *mut GeditWindow) -> *mut GeditDocument;
    pub fn gedit_window_get_active_tab(window: *mut GeditWindow) -> *mut GeditTab;
    pub fn gedit_window_get_active_view(window: *mut GeditWindow) -> *mut GeditView;
    pub fn gedit_window_get_bottom_panel(window: *mut GeditWindow) -> *mut gtk::GtkWidget;
    pub fn gedit_window_get_documents(window: *mut GeditWindow) -> *mut glib::GList;
    pub fn gedit_window_get_group(window: *mut GeditWindow) -> *mut gtk::GtkWindowGroup;
    pub fn gedit_window_get_message_bus(window: *mut GeditWindow) -> *mut GeditMessageBus;
    pub fn gedit_window_get_side_panel(window: *mut GeditWindow) -> *mut gtk::GtkWidget;
    pub fn gedit_window_get_state(window: *mut GeditWindow) -> GeditWindowState;
    pub fn gedit_window_get_statusbar(window: *mut GeditWindow) -> *mut gtk::GtkWidget;
    pub fn gedit_window_get_tab_from_location(window: *mut GeditWindow, location: *mut gio::GFile) -> *mut GeditTab;
    pub fn gedit_window_get_unsaved_documents(window: *mut GeditWindow) -> *mut glib::GList;
    pub fn gedit_window_get_views(window: *mut GeditWindow) -> *mut glib::GList;
    pub fn gedit_window_set_active_tab(window: *mut GeditWindow, tab: *mut GeditTab);

    //=========================================================================
    // GeditAppActivatable
    //=========================================================================
    pub fn gedit_app_activatable_get_type() -> GType;
    pub fn gedit_app_activatable_activate(activatable: *mut GeditAppActivatable);
    pub fn gedit_app_activatable_deactivate(activatable: *mut GeditAppActivatable);
    pub fn gedit_app_activatable_extend_menu(activatable: *mut GeditAppActivatable, extension_point: *const c_char) -> *mut GeditMenuExtension;

    //=========================================================================
    // GeditViewActivatable
    //=========================================================================
    pub fn gedit_view_activatable_get_type() -> GType;
    pub fn gedit_view_activatable_activate(activatable: *mut GeditViewActivatable);
    pub fn gedit_view_activatable_deactivate(activatable: *mut GeditViewActivatable);

    //=========================================================================
    // GeditWindowActivatable
    //=========================================================================
    pub fn gedit_window_activatable_get_type() -> GType;
    pub fn gedit_window_activatable_activate(activatable: *mut GeditWindowActivatable);
    pub fn gedit_window_activatable_deactivate(activatable: *mut GeditWindowActivatable);
    pub fn gedit_window_activatable_update_state(activatable: *mut GeditWindowActivatable);

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn gedit_commands_load_location(window: *mut GeditWindow, location: *mut gio::GFile, encoding: *const gtk_source::GtkSourceEncoding, line_pos: c_int, column_pos: c_int);
    pub fn gedit_commands_load_locations(window: *mut GeditWindow, locations: *const glib::GSList, encoding: *const gtk_source::GtkSourceEncoding, line_pos: c_int, column_pos: c_int) -> *mut glib::GSList;
    pub fn gedit_commands_save_all_documents(window: *mut GeditWindow);
    pub fn gedit_commands_save_document(window: *mut GeditWindow, document: *mut GeditDocument);
    pub fn gedit_commands_save_document_async(document: *mut GeditDocument, window: *mut GeditWindow, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn gedit_commands_save_document_finish(document: *mut GeditDocument, result: *mut gio::GAsyncResult) -> gboolean;
    pub fn gedit_debug(section: GeditDebugSection, file: *const c_char, line: c_int, function: *const c_char);
    pub fn gedit_debug_init();
    pub fn gedit_debug_message(section: GeditDebugSection, file: *const c_char, line: c_int, function: *const c_char, format: *const c_char, ...);
    pub fn gedit_debug_plugin_message(file: *const c_char, line: c_int, function: *const c_char, message: *const c_char);
    pub fn gedit_utils_basename_for_display(location: *mut gio::GFile) -> *mut c_char;
    pub fn gedit_utils_decode_uri(uri: *const c_char, scheme: *mut *mut c_char, user: *mut *mut c_char, host: *mut *mut c_char, port: *mut *mut c_char, path: *mut *mut c_char) -> gboolean;
    pub fn gedit_utils_drop_get_uris(selection_data: *mut gtk::GtkSelectionData) -> *mut *mut c_char;
    pub fn gedit_utils_get_compression_type_from_content_type(content_type: *const c_char) -> gtk_source::GtkSourceCompressionType;
    pub fn gedit_utils_is_valid_location(location: *mut gio::GFile) -> gboolean;
    pub fn gedit_utils_location_get_dirname_for_display(location: *mut gio::GFile) -> *mut c_char;
    pub fn gedit_utils_menu_position_under_tree_view(tree_view: *mut gtk::GtkTreeView, rect: *mut gdk::GdkRectangle) -> gboolean;
    pub fn gedit_utils_newline_type_to_string(newline_type: gtk_source::GtkSourceNewlineType) -> *const c_char;
    pub fn gedit_utils_replace_home_dir_with_tilde(uri: *const c_char) -> *mut c_char;
    pub fn gedit_utils_set_atk_name_description(widget: *mut gtk::GtkWidget, name: *const c_char, description: *const c_char);
    pub fn gedit_utils_set_direct_save_filename(context: *mut gdk::GdkDragContext) -> *mut c_char;
    pub fn gedit_utils_str_end_truncate(string: *const c_char, truncate_length: c_uint) -> *mut c_char;
    pub fn gedit_utils_str_middle_truncate(string: *const c_char, truncate_length: c_uint) -> *mut c_char;
    pub fn gedit_warning(parent: *mut gtk::GtkWindow, format: *const c_char, ...);

}
